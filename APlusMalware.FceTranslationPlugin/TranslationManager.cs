using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEngine;

namespace APlusMalware.FceTranslationPlugin
{
    public class TranslationManager : FortressCraftMod
    {
        private readonly Dictionary<String, String> _neededReplacements = new Dictionary<String, String>();
        private static readonly Int32 ModVersion = 1;
        private static readonly String ModKey = "APlusMalware.FceTranslationPlugin";
        private static readonly String LangFileName = "Translations.xml";

        public override ModRegistrationData Register()
        {
            String filePath = Path.Combine(ModManager.GetModPath(), Path.Combine(ModKey, Path.Combine(ModVersion.ToString(), LangFileName)));
            try
            {
                var translations = (Translation[])XMLParser.ReadXML(filePath, typeof (Translation[]));
                foreach (var t in translations)
                {
                    _neededReplacements.Add(t.Old, t.New);
                }
            }
            catch (IOException ex)
            {
                Debug.LogError("Failed to load translation file: " + ex);
            }

            ModRegistrationData data = new ModRegistrationData();
            return data;
        }

        public override void LowFrequencyUpdate()
        {
            if (LowFrequencyThread.mnThreadedUpdates % 64 != 0) // Run every 12.8 seconds
                return;
            if (_neededReplacements.Count == 0)
                return;

            RunReplacements();
        }

        public void RunReplacements()
        {
            var keys = _neededReplacements.Keys.ToList();
            foreach (var original in keys)
            {
                String replacment = _neededReplacements[original];
                if (AttemptReplaceString(original, replacment))
                    _neededReplacements.Remove(original);
                else
                    Debug.LogWarning($"[Translate] Could not replace {original}!");
            }
        }

        public unsafe Boolean AttemptReplaceString(String original, String replacement)
        {
            String interned = String.IsInterned(original);
            if (interned == null)
                return false;
            
            fixed (Char* beginning = interned) // Points to the first character of the string
            {
                for (Int32 i = 0; i < interned.Length; i++)
                {
                    Char c = i < replacement.Length ? replacement[i] : ' '; // Fill remaning characters with spaces
                    *(beginning + i) = c;
                }
            }
            return true;
        }
    }
}
